name: Validate Pull Request - QA
on:
  pull_request:
    branches:
      - qa
    paths:
      - 'force-app/**'

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Verificar se o evento foi cancelado
        if: github.event.action == 'closed' && github.event.pull_request.merged == false
        run: |
          echo "O Pull Request foi cancelado. Saindo com erro."
          exit 1

      - name: Checkout do repositório
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Instalar dependências do sistema e do Salesforce CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y wget curl jq
          npm install @salesforce/cli --global

      - name: Autenticar com a org QA
        run: |
          echo "${{ secrets.AUTH_URL_QA }}" > sfdx-auth-url.txt
          sf org login sfdx-url -f sfdx-auth-url.txt --alias qa

      - name: Instalar plugin sfdx-git-delta
        run: echo "y" | sf plugins install sfdx-git-delta

      - name: Criar diretório de saída para o pacote delta
        run: mkdir -p deploy

      - name: Gerar pacote delta no diretório deploy
        run: |
          sf sgd source delta --from origin/qa --to HEAD --output-dir deploy

      - name: Listar conteúdo do diretório deploy
        run: ls -R deploy

      - name: Exibir conteúdo do package.xml
        run: cat deploy/package/package.xml

      - name: Implantar e rodar testes específicos
        run: |
          TEST_CLASSES=$(cat specified-tests.txt | tr '\n' ',')
          sf project deploy start --manifest deploy/package/package.xml --test-level RunSpecifiedTests --tests "$TEST_CLASSES" --target-org qa > deploy/deploy_output.log || true

      - name: Verificar falhas de componentes no log de deploy
        run: |
          if grep -i "Component Failures" deploy/deploy_output.log; then
            echo "Falhas de componente detectadas! O deploy falhou."
            cat deploy/deploy_output.log
            exit 1
          fi

      - name: Exibir o Log de Deploy diretamente no console
        run: |
          echo "Log de Deploy - Erros e Detalhes"
          cat deploy/deploy_output.log

      - name: Definir nome do artefato com org, data e hora
        id: set-artifact-name
        run: |
          ORG_NAME="QA"
          export TZ="America/Sao_Paulo"
          TIMESTAMP=$(date +'%d-%m-%Y--%H-%M-%S')
          echo "PACKAGE_XML_ARTIFACT=${ORG_NAME}_Package_xml_${TIMESTAMP}" >> $GITHUB_OUTPUT
          echo "DEPLOY_LOG_ARTIFACT=${ORG_NAME}_Validade_log_${TIMESTAMP}" >> $GITHUB_OUTPUT

      - name: Salvar package.xml
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.set-artifact-name.outputs.PACKAGE_XML_ARTIFACT }}
          path: deploy/package/package.xml

      - name: Salvar o Log de Deploy
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.set-artifact-name.outputs.DEPLOY_LOG_ARTIFACT }}
          path: deploy/deploy_output.log
